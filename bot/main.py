from __future__ import annotations
import asyncio
import logging
import os
from typing import Dict
import secrets

from dotenv import load_dotenv
from telegram import Update
from telegram.constants import ChatType, ParseMode
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, filters
)

from liers.game import GameState
from liers.models import Rank

load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("liers-bot")

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –°–æ–∑–¥–∞–π—Ç–µ .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")


# –ò–≥—Ä—ã –ø–æ chat_id
GAMES: Dict[int, GameState] = {}

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä—É–∫–æ–π –≤ –ª–∏—á–∫–µ (user_id -> message_id)
LAST_HAND_MSG: Dict[int, int] = {}

async def _send_hand_dm(context: ContextTypes.DEFAULT_TYPE, uid: int, text: str):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä—É–∫–æ–π –≤ –ª–∏—á–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ, —Å–æ—Ö—Ä–∞–Ω—è—è message_id."""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –±—ã–ª–æ)
    prev_id = LAST_HAND_MSG.get(uid)
    if prev_id is not None:
        try:
            await context.bot.delete_message(chat_id=uid, message_id=prev_id)
        except Exception:
            pass  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å/–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        msg = await context.bot.send_message(chat_id=uid, text=text)
        LAST_HAND_MSG[uid] = msg.message_id
    except Exception:
        pass

# === Dealer mode (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º) ===
class DealerSession:
    """–ü—Ä–æ—Å—Ç–∞—è —Å–µ—Å—Å–∏—è –¥–∏–ª–µ—Ä–∞: –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å alive."""
    def __init__(self) -> None:
        self.players: dict[str, bool] = {}  # name -> alive
        self.revolvers: dict[str, int] = {}

    def reset_revolver(self, name: str | None = None) -> None:
        """–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∏—Ç—å –±–∞—Ä–∞–±–∞–Ω(—ã). –ï—Å–ª–∏ name –ø–µ—Ä–µ–¥–∞–Ω ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∏–Ω–∞—á–µ –¥–ª—è –≤—Å–µ—Ö."""
        if name is None:
            for n in list(self.revolvers.keys()):
                self.revolvers[n] = 6
        else:
            if name in self.revolvers:
                self.revolvers[name] = 6

    def add(self, name: str) -> str:
        name = name.strip()
        if not (1 <= len(name) <= 24):
            raise ValueError("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1..24 —Å–∏–º–≤–æ–ª–∞.")
        if name in self.players:
            return f"–ò–≥—Ä–æ–∫ {name} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ."
        if len(self.players) >= 6:
            raise ValueError("–ú–∞–∫—Å–∏–º—É–º 6 –∏–≥—Ä–æ–∫–æ–≤.")
        self.players[name] = True
        self.revolvers[name] = 6
        return f"–î–æ–±–∞–≤–ª–µ–Ω: {name}"

    def ensure_bounds(self) -> None:
        n = len(self.players)
        if n < 2:
            raise ValueError("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞. –î–æ–±–∞–≤—å—Ç–µ /dealer_add <–∏–º—è>.")

    def list_text(self) -> str:
        if not self.players:
            return "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤–ª—è–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤: /dealer_add <–∏–º—è>"
        rows = []
        for i, (n, alive) in enumerate(self.players.items()):
            odds = self.revolvers.get(n, 6)
            extra = f" (—à–∞–Ω—Å 1/{odds})" if alive else ""
            rows.append(f"{i+1}. {n} ‚Äî {'–ñ–∏–≤(–∞)' if alive else '–í—ã–±—ã–ª(–∞)'}{extra}")
        return "–ò–≥—Ä–æ–∫–∏:\n" + "\n".join(rows)

    def shoot(self, name: str) -> tuple[str, bool]:
        self.ensure_bounds()
        if name not in self.players:
            raise ValueError(f"–ù–µ—Ç –∏–≥—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º: {name}")
        if not self.players[name]:
            return (f"{name} —É–∂–µ –≤—ã–±—ã–ª.", False)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–Ω—Å –∏–º–µ–Ω–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        remaining = self.revolvers.get(name, 6)
        if remaining < 1:
            remaining = 1
        bullet = (secrets.randbelow(remaining) == 0)

        if bullet:
            self.players[name] = False
            self.reset_revolver(name)  # –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            msg = f"üî´ –ë–∞—Ö! {name} –Ω–µ –≤—ã–∂–∏–ª."
            return (msg, True)
        else:
            remaining = max(1, remaining - 1)
            self.revolvers[name] = remaining
            hint = f"1/{remaining}" if remaining > 1 else "1/1"
            msg = f"üî´ –©–µ–ª—á–æ–∫... {name} –ø–æ–≤–µ–∑–ª–æ! (—Å–ª–µ–¥—É—é—â–∏–π —à–∞–Ω—Å {hint})"
            return (msg, False)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –¥–∏–ª–µ—Ä–∞: –ø–æ user_id (–ª–∏—á–∫–∞)
DEALERS: Dict[int, DealerSession] = {}

def _is_dm(update: Update) -> bool:
    chat = update.effective_chat
    return chat and chat.type == ChatType.PRIVATE

async def cmd_dealer_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_dm(update):
        return await update.effective_message.reply_text("Dealer –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
    DEALERS[update.effective_user.id] = DealerSession()
    await update.effective_message.reply_text(
        "üé≤ Dealer-—Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω.\n"
        "–î–æ–±–∞–≤–ª—è–π –∏–≥—Ä–æ–∫–æ–≤: /dealer_add <–∏–º—è>\n"
        "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫: /dealer_list\n"
        "–°–¥–µ–ª–∞—Ç—å –≤—ã—Å—Ç—Ä–µ–ª –ø–æ –∏–≥—Ä–æ–∫—É: /dealer_shoot <–∏–º—è>\n"
        "–°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é: /dealer_reset\n"
        "–õ–∏–º–∏—Ç: 2‚Äì6 –∏–≥—Ä–æ–∫–æ–≤."
    )

async def cmd_dealer_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_dm(update):
        return await update.effective_message.reply_text("–î–æ–±–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ.")
    sess = DEALERS.setdefault(update.effective_user.id, DealerSession())
    if not context.args:
        return await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /dealer_add <–∏–º—è>")
    name = " ".join(context.args)
    try:
        msg = sess.add(name)
        await update.effective_message.reply_text(msg + "\n" + sess.list_text())
    except ValueError as e:
        await update.effective_message.reply_text(f"–ù–µ–ª—å–∑—è: {e}")

async def cmd_dealer_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_dm(update):
        return await update.effective_message.reply_text("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ª–∏—á–∫–µ.")
    sess = DEALERS.setdefault(update.effective_user.id, DealerSession())
    await update.effective_message.reply_text(sess.list_text())

async def cmd_dealer_shoot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_dm(update):
        return await update.effective_message.reply_text("–°—Ç—Ä–µ–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ (Dealer).")
    sess = DEALERS.setdefault(update.effective_user.id, DealerSession())
    if not context.args:
        return await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /dealer_shoot <–∏–º—è>")
    name = " ".join(context.args)
    try:
        text, died = sess.shoot(name)
        alive = [n for n, a in sess.players.items() if a]
        if len(alive) == 1:
            text += f"\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {alive[0]}"
        elif len(alive) == 0:
            text += "\n–í—Å–µ –≤—ã–±—ã–ª–∏. /dealer_reset ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        await update.effective_message.reply_text(text + "\n" + sess.list_text())
    except ValueError as e:
        await update.effective_message.reply_text(f"–ù–µ–ª—å–∑—è: {e}")

async def cmd_dealer_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_dm(update):
        return await update.effective_message.reply_text("–°–±—Ä–æ—Å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ª–∏—á–∫–µ.")
    DEALERS[update.effective_user.id] = DealerSession()
    await update.effective_message.reply_text("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. /dealer_add <–∏–º—è> ‚Äî –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")


def in_group(update: Update) -> bool:
    chat = update.effective_chat
    return chat and chat.type in (ChatType.GROUP, ChatType.SUPERGROUP)


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Liar‚Äôs Deck –±–æ—Ç.\n"
        "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newgame, /join, /startgame.\n"
        "–í –ª–∏—á–∫–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä—É–∫—É: /hand"
    )


async def cmd_newgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not in_group(update):
        return await update.effective_message.reply_text("–°–æ–∑–¥–∞–≤–∞—Ç—å –∏–≥—Ä—É –Ω—É–∂–Ω–æ –≤ –≥—Ä—É–ø–ø–µ.")
    chat_id = update.effective_chat.id
    GAMES[chat_id] = GameState(chat_id=chat_id)
    await update.effective_message.reply_text("–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –ª–æ–±–±–∏. –ò–≥—Ä–æ–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: /startgame.")


async def cmd_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not in_group(update):
        return await update.effective_message.reply_text("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –∏–≥—Ä–µ –Ω—É–∂–Ω–æ –≤ –≥—Ä—É–ø–ø–µ.")
    chat_id = update.effective_chat.id
    gs = GAMES.get(chat_id)
    if not gs:
        return await update.effective_message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É: /newgame")
    user = update.effective_user
    gs.add_player(user.id, user.username or user.full_name)
    await update.effective_message.reply_text(f"@{user.username or user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è.\n{gs.status()}")


async def cmd_startgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not in_group(update):
        return await update.effective_message.reply_text("–°—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –∏–≥—Ä—É –Ω—É–∂–Ω–æ –≤ –≥—Ä—É–ø–ø–µ.")
    chat_id = update.effective_chat.id
    gs = GAMES.get(chat_id)
    if not gs:
        return await update.effective_message.reply_text("–°–Ω–∞—á–∞–ª–∞ /newgame –∏ /join.")
    try:
        gs.start()
    except ValueError as e:
        return await update.effective_message.reply_text(f"–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å: {e}")

    # –†–∞–∑–æ—Å–ª–∞—Ç—å —Ä—É–∫–∏ –≤ –ª–∏—á–∫—É
    for p in gs.players:
        try:
            await _send_hand_dm(
                context,
                p.user_id,
                f"–ò–≥—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ {chat_id}\n–¢–µ–º–∞: {gs.current_topic.value}\n{gs.hand_str(p.user_id)}",
            )
        except Exception:
            pass  # –µ—Å–ª–∏ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É ‚Äî Telegram –Ω–µ –¥–∞—Å—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤—ã–º

    await update.effective_message.reply_text(
        f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –¢–µ–º–∞: {gs.current_topic.value}\n–ü–µ—Ä–≤—ã–π —Ö–æ–¥: @{gs.current_player().username}\n"
        "–•–æ–¥: /play <–∏–Ω–¥–µ–∫—Å_–∫–∞—Ä—Ç—ã> <–∑–∞—è–≤–ª–µ–Ω–Ω—ã–π_—Ä–∞–Ω–≥>, –Ω–∞–ø—Ä–∏–º–µ—Ä: /play 0 K\n"
        "–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –º–æ–∂–µ—Ç —Å–∫–∞–∑–∞—Ç—å /accuse (–æ–±–≤–∏–Ω–∏—Ç—å)."
    )


async def cmd_hand(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í –ª–∏—á–∫–µ: –ø–æ–∫–∞–∑–∞—Ç—å —Ä—É–∫—É. –í –≥—Ä—É–ø–ø–µ: –ø–æ–¥—Å–∫–∞–∑–∫–∞.
    if in_group(update):
        return await update.effective_message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É /hand ‚Äî –ø—Ä–∏—à–ª—é –≤–∞—à—É —Ä—É–∫—É.")
    # –≤ –ª–∏—á–∫–µ ‚Äî –Ω—É–∂–µ–Ω chat_id –∏–≥—Ä—ã. –•—Ä–∞–Ω–∏–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π?
    # MVP: –ø–æ–∫–∞–∂–µ–º —Ä—É–∫–∏ –≤–æ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä–∞—Ö, –≥–¥–µ –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫ (–∏—Ö –æ–±—ã—á–Ω–æ –º–∞–ª–æ).
    found = False
    for gs in GAMES.values():
        if any(p.user_id == update.effective_user.id for p in gs.players):
            found = True
            await _send_hand_dm(
                context,
                update.effective_user.id,
                f"–ì—Ä—É–ø–ø–∞ {gs.chat_id}. –¢–µ–º–∞: {gs.current_topic.value if gs.current_topic else '‚Äî'}\n{gs.hand_str(update.effective_user.id)}",
            )
    if not found:
        await update.effective_message.reply_text("–í—ã –ø–æ–∫–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–≥—Ä–µ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ /join.")


async def cmd_play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not in_group(update):
        return await update.effective_message.reply_text("–ò–≥—Ä–∞—Ç—å –Ω—É–∂–Ω–æ –≤ –≥—Ä—É–ø–ø–µ.")
    chat_id = update.effective_chat.id
    gs = GAMES.get(chat_id)
    if not gs or not gs.started:
        return await update.effective_message.reply_text("–ò–≥—Ä–∞ –Ω–µ –∏–¥—ë—Ç. /newgame ‚Üí /join ‚Üí /startgame.")
    args = context.args
    if len(args) != 2:
        return await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /play <–∏–Ω–¥–µ–∫—Å_–∫–∞—Ä—Ç—ã> <—Ä–∞–Ω–≥>. –ü—Ä–∏–º–µ—Ä: /play 0 K")
    try:
        idx = int(args[0])
        claimed = Rank.from_str(args[1])
    except Exception as e:
        return await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

    uid = update.effective_user.id
    try:
        lp = gs.play(uid, idx, claimed)
    except ValueError as e:
        return await update.effective_message.reply_text(f"–ù–µ–ª—å–∑—è: {e}")

    await update.effective_message.reply_text(
        f"@{update.effective_user.username or update.effective_user.full_name} –ø–æ–ª–æ–∂–∏–ª –∫–∞—Ä—Ç—É –ª–∏—Ü–æ–º –≤–Ω–∏–∑ –∏ –∑–∞—è–≤–∏–ª {claimed.value}.\n"
        f"–û–±–≤–∏–Ω–∏—Ç—å –º–æ–∂–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫: @{gs.current_player().username}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /accuse"
    )
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏—Å–ª–∞—Ç—å —Ä—É–∫—É —Å—ã–≥—Ä–∞–≤—à–µ–º—É
    try:
        await _send_hand_dm(context, uid, gs.hand_str(uid))
    except Exception:
        pass


async def cmd_accuse(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not in_group(update):
        return await update.effective_message.reply_text("–û–±–≤–∏–Ω—è—Ç—å –Ω—É–∂–Ω–æ –≤ –≥—Ä—É–ø–ø–µ.")
    chat_id = update.effective_chat.id
    gs = GAMES.get(chat_id)
    if not gs or not gs.started:
        return await update.effective_message.reply_text("–ò–≥—Ä–∞ –Ω–µ –∏–¥—ë—Ç.")
    uid = update.effective_user.id
    try:
        msg, shot, died_uid = gs.accuse(uid)
    except ValueError as e:
        return await update.effective_message.reply_text(f"–ù–µ–ª—å–∑—è: {e}")

    await update.effective_message.reply_text(msg)
    # –æ–±–Ω–æ–≤–∏–º —Ä—É–∫–∏ –≤—Å–µ–º, –∫–æ–≥–æ —ç—Ç–æ –∑–∞—Ç—Ä–æ–Ω—É–ª–æ
    affected = set([uid])
    if died_uid:
        affected.add(died_uid)
    if gs.started:
        # —Ç–∞–∫–∂–µ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É, –∫—Ç–æ –∫–ª–∞–ª –∫–∞—Ä—Ç—É
        # (–ø–æ—Å–ª–µ accuse last_play —É–∂–µ None ‚Äî –Ω–µ —É–∑–Ω–∞–µ–º, –∫–æ–≥–æ –∏–º–µ–Ω–Ω–æ; –ø—Ä–æ–ø—É—Å—Ç–∏–º)
        pass
    for p in gs.players:
        if p.user_id in affected:
            try:
                await _send_hand_dm(context, p.user_id, gs.hand_str(p.user_id))
            except Exception:
                pass


async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not in_group(update):
        return await update.effective_message.reply_text("–°—Ç–∞—Ç—É—Å –ª—É—á—à–µ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –≥—Ä—É–ø–ø–µ.")
    gs = GAMES.get(update.effective_chat.id)
    if not gs:
        return await update.effective_message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. /newgame")
    await update.effective_message.reply_text(gs.status())


async def cmd_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not in_group(update):
        return await update.effective_message.reply_text("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–≥—Ä—É –Ω—É–∂–Ω–æ –≤ –≥—Ä—É–ø–ø–µ.")
    chat_id = update.effective_chat.id
    gs = GAMES.get(chat_id)
    if not gs:
        return await update.effective_message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
    msg = gs.stop()
    await update.effective_message.reply_text(msg)
    if not in_group(update):
        return await update.effective_message.reply_text("–¢–µ–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π –∏–≥—Ä—ã.")
    gs = GAMES.get(update.effective_chat.id)
    if not gs or not gs.current_topic:
        return await update.effective_message.reply_text("–¢–µ–º–∞ –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    await update.effective_message.reply_text(f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {gs.current_topic.value}")


async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        "/newgame ‚Äî —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏ –≤ –≥—Ä—É–ø–ø–µ\n"
        "/join ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n"
        "/startgame ‚Äî –Ω–∞—á–∞—Ç—å (2+ –∏–≥—Ä–æ–∫–æ–≤)\n"
        "/hand ‚Äî –≤–∞—à–∞ —Ä—É–∫–∞ (–≤ –ª–∏—á–∫–µ)\n"
        "/play <i> <—Ä–∞–Ω–≥> ‚Äî –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏ –∑–∞—è–≤–∏—Ç—å —Ä–∞–Ω–≥ (K,Q,J,TR)\n"
        "/accuse ‚Äî –æ–±–≤–∏–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (–º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ —Ö–æ–¥—É)\n"
        "/status ‚Äî —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "/topic ‚Äî —Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞\n"
        "\nDealer (–≤ –ª–∏—á–∫–µ):\n"
        "/dealer_new ‚Äî —Å–æ–∑–¥–∞—Ç—å Dealer\n"
        "/dealer_add <–∏–º—è> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n"
        "/dealer_list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/dealer_shoot <–∏–º—è> ‚Äî –≤—ã—Å—Ç—Ä–µ–ª –ø–æ –∏–≥—Ä–æ–∫—É\n"
        "/dealer_reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫\n"
    )


def build_app() -> Application:
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("newgame", cmd_newgame))
    app.add_handler(CommandHandler("join", cmd_join))
    app.add_handler(CommandHandler("startgame", cmd_startgame))
    app.add_handler(CommandHandler("hand", cmd_hand))
    app.add_handler(CommandHandler("play", cmd_play))
    app.add_handler(CommandHandler("accuse", cmd_accuse))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("topic", cmd_topic))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("dealer_new", cmd_dealer_new))
    app.add_handler(CommandHandler("dealer_add", cmd_dealer_add))
    app.add_handler(CommandHandler("dealer_list", cmd_dealer_list))
    app.add_handler(CommandHandler("dealer_shoot", cmd_dealer_shoot))
    app.add_handler(CommandHandler("dealer_reset", cmd_dealer_reset))
    # –û—Ç—Å–µ–∫–∞—Ç—å –ª–∏—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
    app.add_handler(MessageHandler(filters.ALL, lambda u, c: None))
    return app


if __name__ == "__main__":
    app = build_app()
    logger.info("Starting Liar's Deck bot...")
    app.run_polling(close_loop=False)